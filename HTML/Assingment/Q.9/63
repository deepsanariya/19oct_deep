import 'package:flutter/material.dart';
import 'package:fluttertoast/fluttertoast.dart';

void main()
{
  runApp(MyApp());
}

class MyApp extends StatelessWidget 
{
  @override
  Widget build(BuildContext context) 
  {
    return MaterialApp
    (
      title: 'Lifecycle Demo',
      home: LifecycleDemo(),
    );
  }
}

class LifecycleDemo extends StatefulWidget 
{
  @override
  _LifecycleDemoState createState() => _LifecycleDemoState();
}

class _LifecycleDemoState extends State<LifecycleDemo> with WidgetsBindingObserver 
{

  @override
  void initState() 
  {
    super.initState();
    WidgetsBinding.instance.addObserver(this);
    _showToast("initState");
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) 
  {
    super.didChangeAppLifecycleState(state);
    switch (state) 
    {
      case AppLifecycleState.inactive:
        _showToast("AppLifecycleState.inactive");
        break;
      case AppLifecycleState.paused:
        _showToast("AppLifecycleState.paused");
        break;
      case AppLifecycleState.resumed:
        _showToast("AppLifecycleState.resumed");
        break;
      case AppLifecycleState.detached:
        _showToast("AppLifecycleState.detached");
        break;
    }
  }

  @override
  void dispose() 
  {
    WidgetsBinding.instance.removeObserver(this);
    _showToast("dispose");
    super.dispose();
  }

  void _showToast(String message) 
  {
    Fluttertoast.showToast
    (
      msg: message,
      toastLength: Toast.LENGTH_SHORT,
      gravity: ToastGravity.BOTTOM,
    );
  }

  @override
  Widget build(BuildContext context) 
  {
    return Scaffold
    (
      appBar: AppBar
      (
        title: Text('Lifecycle Demo'),
      ),
      body: Center
      (
        child: Text('Check Toast messages for lifecycle stages'),
      ),
    );
  }
}